// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package client is a generated GoMock package.
package client

import (
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockHTTPClientDoer is a mock of HTTPClientDoer interface
type MockHTTPClientDoer struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientDoerMockRecorder
}

// MockHTTPClientDoerMockRecorder is the mock recorder for MockHTTPClientDoer
type MockHTTPClientDoerMockRecorder struct {
	mock *MockHTTPClientDoer
}

// NewMockHTTPClientDoer creates a new mock instance
func NewMockHTTPClientDoer(ctrl *gomock.Controller) *MockHTTPClientDoer {
	mock := &MockHTTPClientDoer{ctrl: ctrl}
	mock.recorder = &MockHTTPClientDoerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHTTPClientDoer) EXPECT() *MockHTTPClientDoerMockRecorder {
	return m.recorder
}

// Do mocks base method
func (m *MockHTTPClientDoer) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do
func (mr *MockHTTPClientDoerMockRecorder) Do(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHTTPClientDoer)(nil).Do), req)
}
